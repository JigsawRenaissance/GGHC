<?xml version="1.0" encoding="UTF-8"?>
<model version="1.1.06" framework="qpc">
  <package name="Events" stereotype="0x01">
    <class name="EV_NOTE_DONE" superclass="../../0/0">
      <attribute name="note" type="Note*" visibility="0x00" properties="0x00"/>
    </class>
    <class name="EV_START_NOTE" superclass="../../0/0">
      <attribute name="note" type="Note*" visibility="0x00" properties="0x00"/>
    </class>
  </package>
  <package name="AOs" stereotype="0x02">
    <class name="AudioPlayer" superclass="../../0/1">
      <documentation>Plays individual sounds; also provides metronome.</documentation>
      <attribute name="channels" type="Note[6]" visibility="0x00" properties="0x01"/>
      <attribute name="timeEvt" type="QTimeEvt" visibility="0x01" properties="0x00"/>
      <attribute name="activeNotes" type="int8_t" visibility="0x00" properties="0x00">
        <documentation>the number of notes currently being played</documentation>
      </attribute>
      <operation name="startPlaying" type="bool" visibility="0x00" properties="0x00"/>
      <statechart>
        <initial target="../1">
          <action brief="startTicker">QTimeEvt_postEvery(&amp;me-&gt;timeEvt,(QActive*)me,TICKS_PER_SEC / 2);
 </action>
        </initial>
        <state name="idle">
          <entry brief="audioOff();">audioOff();
activeNotes = 0;</entry>
          <exit/>
          <tran trig="EV_START_NOTE" target="../../2">
            <action brief="startPlaying(e-&gt;note); activeNotes++;">startPlaying(e-&gt;note);
activeNotes++;</action>
          </tran>
        </state>
        <state name="playing">
          <entry/>
          <exit/>
          <tran trig="EV_NOTE_DONE" target="../../1">
            <action brief="activeNotes--">activeNotes--;</action>
          </tran>
        </state>
        <state_diagram size="102,76">
          <state_glyph ref="1" node="4,12,18,8">
            <text box="1,2,13,4"/>
          </state_glyph>
          <state_glyph ref="2" node="63,12,23,6"/>
          <tran_glyph ref="1/0" conn="22,16,1,3,41">
            <text box="0,-2,37,2"/>
          </tran_glyph>
          <initial_glyph ref="0" conn="4,4,5,0,3,8">
            <text box="0,-2,9,2"/>
          </initial_glyph>
          <tran_glyph ref="2/0" conn="80,18,2,2,5,-67,-3">
            <text box="-23,3,20,3"/>
          </tran_glyph>
        </state_diagram>
      </statechart>
    </class>
    <class name="Note" superclass=""/>
    <class name="AccelerometerListener" superclass="../../0/1">
      <attribute name="history" type="uint8_t[100]" visibility="0x00" properties="0x00"/>
      <attribute name="timeEvt" type="QTimeEvt" visibility="0x01" properties="0x00"/>
      <operation name="ctor" type="void" visibility="0x00" properties="0x00"/>
      <statechart>
        <initial target="../1">
          <action brief="startTicker">QTimeEvt_postEvery(&amp;me-&gt;timeEvt,(QActive*)me, 1);
 </action>
        </initial>
        <state name="state1">
          <entry/>
          <exit/>
        </state>
        <state_diagram size="80,50">
          <state_glyph ref="1" node="7,8,16,6"/>
          <initial_glyph ref="0" conn="5,5,5,0,7,3">
            <text box="0,-2,9,2"/>
          </initial_glyph>
        </state_diagram>
      </statechart>
    </class>
    <class name="ButtonWatcher" superclass="../../0/1">
      <operation name="lightLED" type="void" visibility="0x00" properties="0x00"/>
      <operation name="ledsOff" type="void" visibility="0x00" properties="0x00"/>
      <statechart>
        <initial target="../1">
          <action/>
        </initial>
        <state name="idle">
          <entry brief="ledsOff();">ledsOff();</entry>
          <exit/>
          <tran trig="EV_BUTTON_PRESSED" target="../../2"/>
        </state>
        <state name="pressed">
          <entry brief="lightLED()">lightLED();</entry>
          <exit/>
          <tran trig="EV_BUTTON_RELEASED" target="../../1"/>
        </state>
        <state_diagram size="89,67">
          <state_glyph ref="1" node="14,10,14,6">
            <text box="1,2,13,2"/>
          </state_glyph>
          <state_glyph ref="2" node="53,10,16,6">
            <text box="1,2,12,2"/>
          </state_glyph>
          <initial_glyph ref="0" conn="9,6,5,0,8,4">
            <text box="0,-2,6,2"/>
          </initial_glyph>
          <tran_glyph ref="1/0" conn="28,13,1,3,25">
            <text box="0,-2,17,2"/>
          </tran_glyph>
          <tran_glyph ref="2/0" conn="60,16,2,2,2,-39,-2">
            <text box="-20,0,16,2"/>
          </tran_glyph>
        </state_diagram>
      </statechart>
    </class>
    <attribute name="AO_AccelerometerListener" type="QActive*" visibility="0x00" properties="0x00"/>
    <attribute name="AO_ButtonWatcher" type="QActive *" visibility="0x00" properties="0x00"/>
    <attribute name="AO_AudioPlayer" type="QActive *" visibility="0x00" properties="0x00"/>
  </package>
  <filesystem path="../qm_code">
    <file name="audioPlayer.h">
      <text>#include &quot;qp_port.h&quot;

enum
{
    TIMEOUT_SIG = USER_SIG,
    EV_START_NOTE_SIG,
    EV_NOTE_DONE_SIG,
} AudioPlayerSignal;

$declare(Events::EV_NOTE_DONE)

$declare(Events::EV_START_NOTE)

$declare(AOs::AudioPlayer)

/* define some other functions */</text>
    </file>
    <file name="audioPlayer.c">
      <text>$define(Events::EV_NOTE_DONE)

$define(Events::EV_START_NOTE)
$define(AOs::AudioPlayer)</text>
    </file>
    <file name="buttonWatcher.h">
      <text>#include &quot;qp_port.h&quot;
#include &quot;jigbox.h&quot;

$declare(AOs::ButtonWatcher)

</text>
    </file>
    <file name="buttonWatcher.c">
      <text>#include &quot;buttonWatcher.h&quot;

$define(AOs::ButtonWatcher)
</text>
    </file>
    <file name="accelerometerListener.h">
      <text>#include &quot;jigbox.h&quot;
#include &quot;qp_port.h&quot;

$declare(AOs::AO_AccelerometerListener)</text>
    </file>
    <file name="accelerometerListener.c">
      <text>#include &quot;accelerometerListener.h&quot;

$declare(AOs::AccelerometerListener)

static Display l_Listener;    // the singleton AccelerometerListener

/* Global objects ----------------------------------------------------------*/
QActive * const AO_AccelerometerListener = (QActive *)&amp;l_Listener; /* the opaque pointer */

$define(AOs::AccelerometerListener)</text>
    </file>
    <file name="main.c">
      <text/>
    </file>
  </filesystem>
</model>
